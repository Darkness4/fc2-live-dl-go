name: Go CI

on:
  push:
    tags:
      - '*'
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  lint:
    name: Lint fc2-live-dl-go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Download all Go modules
        run: |
          go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout 5m

  test:
    name: Test fc2-live-dl-go
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Download all Go modules
        run: |
          go mod download

      - name: test
        run: go test -v -race -covermode=atomic -tags=unit -timeout=30s ./...

  build:
    name: Build fc2-live-dl-go
    runs-on: self-hosted

    needs: [lint, test]

    steps:
      - uses: actions/checkout@v3

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y make build-essential

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Download all Go modules
        run: |
          go mod download

      - name: Build
        run: |
          make build-all

      - name: Branch name
        if: startsWith(github.ref, 'refs/tags')
        id: branch_name
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get the oci compatible version
        if: startsWith(github.ref, 'refs/tags')
        id: get_version
        run: |
          OCI_VERSION=$(echo ${GITHUB_REF#refs/*/} | sed 's/+/-/g')
          echo "VERSION=${OCI_VERSION}" >> $GITHUB_OUTPUT

      - name: Create release and upload binaries
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/fc2-live-dl-go-*
            bin/checksums.txt
          body_path: bin/checksums.md
          tag_name: ${{ steps.branch_name.outputs.TAG_NAME }}
          name: ${{ steps.branch_name.outputs.TAG_NAME }}
          draft: false # So we can manually edit before publishing
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }} # v0.1.2-beta1, 1.2.3-rc1

  build-export:
    name: Build and export fc2-live-dl-go Docker
    runs-on: self-hosted

    needs: [lint, test, build]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: Build
        uses: docker/build-push-action@v4
        if: ! startsWith(github.ref, 'refs/tags')
        with:
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: darkness4/fc2-live-dl-go:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the oci compatible version
        if: startsWith(github.ref, 'refs/tags')
        id: get_version
        run: |
          OCI_VERSION=$(echo ${GITHUB_REF#refs/*/} | sed 's/+/-/g')
          echo "VERSION=${OCI_VERSION}" >> $GITHUB_OUTPUT

      - name: Build and export
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-arg: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
          tags: |
            ghcr.io/darkness4/fc2-live-dl-go:latest
            ghcr.io/darkness4/fc2-live-dl-go:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
