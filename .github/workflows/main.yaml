name: Go CI

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches:
      - 'main'
    paths:
      - '**.go'
      - '**.c'
      - '**.h'
      - 'Dockerfile*'
      - '.github/workflows/main.yaml'
  pull_request:
    branches:
      - 'main'

jobs:
  lint:
    name: Lint fc2-live-dl-go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libavformat-dev libavcodec-dev libavutil-dev

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: go.sum

      - name: Download all Go modules
        run: |
          go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout 5m

  test:
    name: Test fc2-live-dl-go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libavformat-dev libavcodec-dev libavutil-dev

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          cache-dependency-path: go.sum

      - name: Download all Go modules
        run: |
          go mod download

      - name: test
        run: go test -v -race -covermode=atomic -tags=unit -timeout=30s ./...

  build-export-static:
    name: Build and export fc2-live-dl-go static Docker
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    needs: [lint, test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: docker_meta_dev
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/darkness4/fc2-live-dl-go
          tags: |
            dev

      - name: Build and export dev
        uses: docker/build-push-action@v6
        id: build-and-push-dev
        with:
          file: Dockerfile.static
          platforms: linux/amd64,linux/arm64,linux/riscv64
          push: true
          build-args: |
            VERSION=dev
          tags: ${{ steps.docker_meta_dev.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.docker_meta_dev.outputs.labels }}
          annotations: ${{ steps.docker_meta_dev.outputs.annotations }}

      - name: Sign the dev images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push-dev.outputs.digest }}
          TAGS: ${{ steps.docker_meta_dev.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - id: docker_meta
        uses: docker/metadata-action@v5
        if: startsWith(github.ref, 'refs/tags')
        with:
          images: ghcr.io/darkness4/fc2-live-dl-go
          tags: |
            latest
            type=semver,pattern={{version}}

      - name: Build and export
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          file: Dockerfile.static
          platforms: linux/amd64,linux/arm64,linux/riscv64
          push: true
          build-args: |
            VERSION=v${{ steps.docker_meta.outputs.version }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.docker_meta.outputs.labels }}
          annotations: ${{ steps.docker_meta.outputs.annotations }}

      - name: Sign the images with GitHub OIDC Token
        if: startsWith(github.ref, 'refs/tags')
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

  build-windows:
    name: Test Build fc2-live-dl-go static windows binaries

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.static-windows
          platforms: linux/amd64
          push: false
          tags: darkness4/fc2-live-dl-go:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-darwin:
    name: Test Build fc2-live-dl-go darwin binaries

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Build Darwin
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.darwin
          platforms: linux/amd64,linux/arm64
          push: false
          tags: darkness4/fc2-live-dl-go:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: busybox

      - name: Build Darwin
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.darwin
          platforms: linux/amd64
          push: false
          tags: darkness4/fc2-live-dl-go:amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: busybox
          load: true

      - name: Extract binaries
        run: |
          mkdir -p /tmp/out
          docker run --rm \
            -v /tmp/out:/out \
            --platform linux/amd64 \
            --entrypoint sh \
            darkness4/fc2-live-dl-go:amd64 \
            -c "mv /fc2-live-dl-go /out/fc2-live-dl-go-darwin-amd64"

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: os-x-binaries
          path: /tmp/out
          if-no-files-found: error
          retention-days: 1

  test-darwin:
    name: Test running darwin to see any linking errors

    strategy:
      fail-fast: true
      matrix:
        os: [macos-12, macos-13, macos-14]

    runs-on: ${{ matrix.os }}

    needs: [build-darwin]

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: os-x-binaries

      - name: Execute binaries
        run: |
          chmod +x ./fc2-live-dl-go-darwin-amd64
          ./fc2-live-dl-go-darwin-amd64 --help

  test-memleaks:
    name: Run memleak tests

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run memleak tests
        run: |
          docker run --rm \
            -v $(pwd):/in \
            -w /in \
            ghcr.io/darkness4/fc2-live-dl-go:valgrind \
            make memleaks
