name: Go CI

on:
  workflow_dispatch:
  push:
    tags:
      - '*'
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  lint:
    name: Lint fc2-live-dl-go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libavformat-dev libavcodec-dev libavutil-dev

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Download all Go modules
        run: |
          go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout 5m

  test:
    name: Test fc2-live-dl-go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download build-essential
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libavformat-dev libavcodec-dev libavutil-dev

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Download all Go modules
        run: |
          go mod download

      - name: test
        run: go test -v -race -covermode=atomic -tags=unit -timeout=30s ./...

  build-export:
    name: Build and export fc2-live-dl-go Docker
    runs-on: ubuntu-latest

    needs: [lint, test]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: Build
        uses: docker/build-push-action@v4
        if: ${{ ! startsWith(github.ref, 'refs/tags') }}
        with:
          file: Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64
          push: false
          tags: darkness4/fc2-live-dl-go:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the oci compatible version
        if: startsWith(github.ref, 'refs/tags')
        id: get_version
        run: |
          OCI_VERSION=$(echo ${GITHUB_REF#refs/*/} | sed 's/+/-/g' | sed -E 's/v(.*)/\1/g' )
          echo "VERSION=${OCI_VERSION}" >> $GITHUB_OUTPUT

      - name: Build and export
        if: startsWith(github.ref, 'refs/tags')
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64
          push: true
          build-args: |
            VERSION=v${{ steps.get_version.outputs.VERSION }}
          tags: |
            ghcr.io/darkness4/fc2-live-dl-go:latest
            ghcr.io/darkness4/fc2-live-dl-go:dev
            ghcr.io/darkness4/fc2-live-dl-go:${{ steps.get_version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and export dev
        if: github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64
          push: true
          build-args: |
            VERSION=dev
          tags: |
            ghcr.io/darkness4/fc2-live-dl-go:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
